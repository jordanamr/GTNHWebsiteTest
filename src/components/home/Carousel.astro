---
import CarouselItem from "./CarouselItem.astro";
import { Picture } from "astro:assets";
import { Icon } from "astro-icon/components";

import image1 from "../../assets/home/carousel/1.png";
import image2 from "../../assets/home/carousel/2.png";
import image3 from "../../assets/home/carousel/3.png";
import image4 from "../../assets/home/carousel/4.png";
import image5 from "../../assets/home/carousel/5.png";

// Slideshow speed in milliseconds
const SLIDESHOW_SPEED = 5000;
---

<div class="rounded-2xl p-4">
  <div class="carousel-container relative overflow-hidden rounded-xl">
    <!-- Carousel Images -->
    <div class="carousel-track flex transition-transform duration-500 ease-in-out" id="carousel-track">
      <CarouselItem title="Amazing Build #1" author="Builder1">
        <Picture
          src={image1}
          alt=""
          widths={[360, 640, 960, 1280, 1920]}
          sizes="(max-width: 640px) 360px, (max-width: 768px) 600px, (max-width: 1024px) 768px, 1024px"
          formats={["webp"]}
          loading="eager"
          fetchpriority="high"
          class="w-full h-full object-cover"
        />
      </CarouselItem>
      <CarouselItem title="Amazing Build #2" author="Builder2">
        <Picture
          src={image2}
          alt=""
          widths={[360, 640, 960, 1280, 1920]}
          sizes="(max-width: 640px) 360px, (max-width: 768px) 600px, (max-width: 1024px) 768px, 1024px"
          formats={["webp"]}
          loading="lazy"
          class="w-full h-full object-cover"
        />
      </CarouselItem>
      <CarouselItem title="Amazing Build #3" author="Builder3">
        <Picture
          src={image3}
          alt=""
          widths={[360, 640, 960, 1280, 1920]}
          sizes="(max-width: 640px) 360px, (max-width: 768px) 600px, (max-width: 1024px) 768px, 1024px"
          formats={["webp"]}
          loading="lazy"
          class="w-full h-full object-cover"
        />
      </CarouselItem>
      <CarouselItem title="Amazing Build #4" author="Builder4">
        <Picture
          src={image4}
          alt=""
          widths={[360, 640, 960, 1280, 1920]}
          sizes="(max-width: 640px) 360px, (max-width: 768px) 600px, (max-width: 1024px) 768px, 1024px"
          formats={["webp"]}
          loading="lazy"
          class="w-full h-full object-cover"
        />
      </CarouselItem>
      <CarouselItem title="Amazing Build #5" author="Builder5">
        <Picture
          src={image5}
          alt=""
          widths={[360, 640, 960, 1280, 1920]}
          sizes="(max-width: 640px) 360px, (max-width: 768px) 600px, (max-width: 1024px) 768px, 1024px"
          formats={["webp"]}
          loading="lazy"
          class="w-full h-full object-cover"
        />
      </CarouselItem>
    </div>
    <!-- Arrow overlay positioned over the image area -->
    <div id="carousel-arrow-overlay" class="pointer-events-none absolute inset-x-0 z-10" style="top:0;height:0;">
      <div class="h-full flex items-center justify-between px-2 sm:px-3 md:px-4">
        <button
          id="carousel-prev"
          aria-label="Previous slide"
          class="pointer-events-auto cursor-pointer select-none rounded-full bg-black/40 hover:bg-black/60 text-white backdrop-blur p-1 sm:p-2 md:p-3 shadow focus:outline-none focus:ring-2 focus:ring-white/60"
        >
          <Icon name="mdi:arrow-left-bold" class="w-7 h-7 sm:w-9 sm:h-9 md:w-16 md:h-16" />
        </button>
        <button
          id="carousel-next"
          aria-label="Next slide"
          class="pointer-events-auto cursor-pointer select-none rounded-full bg-black/40 hover:bg-black/60 text-white backdrop-blur p-1 sm:p-2 md:p-3 shadow focus:outline-none focus:ring-2 focus:ring-white/60"
        >
          <Icon name="mdi:arrow-right-bold" class="w-7 h-7 sm:w-9 sm:h-9 md:w-16 md:h-16" />
        </button>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ SLIDESHOW_SPEED }}>
  let currentSlide = 0;
  let totalSlides = 0;
  let track = null;
  let container = null;
  let overlay = null;
  let intervalId = null;
  let lastManualAt = 0;

  function initializeSlideshow() {
    track = document.getElementById("carousel-track");
    container = track?.closest(".carousel-container");
    overlay = document.getElementById("carousel-arrow-overlay");
    totalSlides = track?.children?.length || 0;

    // Start auto-advance slideshow
    if (totalSlides > 1) {
      resetAutoAdvance();
    }

    // Wire up arrows
    const prevBtn = document.getElementById("carousel-prev");
    const nextBtn = document.getElementById("carousel-next");
    const handleNav = (delta) => {
      lastManualAt = performance.now();
      step(delta);
      resetAutoAdvance();
    };
    prevBtn?.addEventListener("click", () => handleNav(-1));
    nextBtn?.addEventListener("click", () => handleNav(1));

    // Keep overlay sized/positioned
    updateOverlay();
    window.addEventListener("resize", updateOverlay);
  }

  function setSlide(index) {
    if (!track || totalSlides === 0) return;
    currentSlide = (index + totalSlides) % totalSlides;
    track.style.transform = `translateX(-${currentSlide * 100}%)`;
    updateOverlay();
  }

  function step(delta) {
    setSlide(currentSlide + delta);
  }

  function updateOverlay() {
    try {
      if (!container || !overlay) return;
      // Use the current slide's image area to determine overlay position/size
      const slide = track?.children?.[currentSlide];
      const aspect = slide?.querySelector?.(".aspect-video");
      if (!aspect) return;
      const containerRect = container.getBoundingClientRect();
      const rect = aspect.getBoundingClientRect();
      const top = Math.max(0, rect.top - containerRect.top);
      const height = rect.height;
      overlay.style.top = `${top}px`;
      overlay.style.height = `${height}px`;
    } catch (_) {
      // noop
    }
  }

  function autoTick() {
    if (performance.now() - lastManualAt < 250) return;
    step(1);
  }

  function resetAutoAdvance() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = null;
    }
    intervalId = setInterval(autoTick, SLIDESHOW_SPEED);
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    initializeSlideshow();
  });
</script>
